@page "/"

@inject ILogger<Home> Logger
@inject IDbContextFactory<FercSummaryContext> DbContextFactory
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

@if (allProjects is not null)
{
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenFormField Text="Project ID">
            <RadzenDropDown TValue="string" 
                            Data="@allProjects" 
                            @bind-Value="projectId" 
                            AllowFiltering="true" 
                            AllowVirtualization="true"
                            Change="OnProjectSelect" />
        </RadzenFormField>

        <RadzenAccordion>
            <Items>
                @foreach (SummaryModel summary in summaries)
                {
                    <RadzenAccordionItem Text="@summary.FileName">
                        <RadzenButton Text="Download" Icon="download" Click="async () => await DownloadSummary(summary)" />
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenCard style="width: 50%;">
                                <RadzenText TextStyle="TextStyle.Overline" Text="Summary" />
                                <RadzenText Text="@summary.SummaryText" />
                            </RadzenCard>
                            <RadzenCard style="width: 50%;">
                                <RadzenText TextStyle="TextStyle.Overline" Text="Original" />
                                <RadzenText Text="@summary.OriginalText" />
                            </RadzenCard>
                        </RadzenStack>
                    </RadzenAccordionItem>
                }
            </Items>
        </RadzenAccordion>
        


    </RadzenStack>

}





@code {
    private record SummaryModel(int SummaryId, string SummaryText, string OriginalText, string FileName);

    List<string>? allProjects;

    string? projectId;

    List<SummaryModel> summaries = [];

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();

        allProjects = await context.Summaries
            .Select(s => s.ProjectId)
            .Distinct()
            .ToListAsync();
    }

    async Task OnProjectSelect()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();

        summaries = await context.Summaries
            .Where(s => s.ProjectId == projectId)
            .Select(s => new SummaryModel(s.SummaryId, s.SummaryText, s.FileText, s.OriginalFileName))
            .ToListAsync();
    }

    async Task DownloadSummary(SummaryModel summary)
    {
        await JS.InvokeVoidAsync("triggerFileDownload", summary.FileName, $"api/files/{summary.SummaryId}");
    }
}