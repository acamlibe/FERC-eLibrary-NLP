@page "/"

@inject ILogger<Home> Logger
@inject IDbContextFactory<FercSummaryContext> DbContextFactory
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

@if (allProjects is not null)
{
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenFormField Text="Project ID">
            <RadzenDropDown TValue="string" Data="@allProjects" @bind-Value="projectId" AllowFiltering="true"
                AllowVirtualization="true" Change="OnProjectSelect" />
        </RadzenFormField>

        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenCard Style="width: 500px; height: max-content;">
                    @CardHeader("Project Summary")
                    <RadzenText Text="@projectSummary" />
                </RadzenCard>
                <RadzenCard>
                    @CardHeader("Issue Date")
                    <RadzenText TextStyle="TextStyle.DisplayH6">September 27, 1988</RadzenText>
                </RadzenCard>
                <RadzenCard>
                    @CardHeader("Expiration Date")
                    <RadzenText TextStyle="TextStyle.DisplayH6">December 31, 2040</RadzenText>
                </RadzenCard>
                <RadzenCard>
                    @CardHeader("Plant Capacity (KWh)")
                    <RadzenText TextStyle="TextStyle.DisplayH6">30,000 KWh</RadzenText>
                </RadzenCard>
                <RadzenCard>
                    @CardHeader("Dam Capacity (KWh)")
                    <RadzenText TextStyle="TextStyle.DisplayH6">38,000 KWh</RadzenText>
                </RadzenCard>
                <RadzenCard>
                    @CardHeader("Waterway")
                    <RadzenText TextStyle="TextStyle.DisplayH6">Sacandaga River</RadzenText>
                </RadzenCard>
            </RadzenStack>

            <RadzenStack Orientation="Orientation.Vertical" Style="width: 100%; height:max-content;">
                <RadzenCard Style="width: 100%; height:max-content;">
                    @CardHeader("Project File Summaries")
                    <RadzenAccordion Multiple="true" Style="width: 100%">
                        <Items>
                            @foreach (SummaryModel summary in summaries)
                                {
                                    <RadzenAccordionItem Text="@summary.FileName">
                                        <RadzenButton Text="Original File" Icon="download"
                                            Click="async () => await DownloadSummary(summary)" Style="margin-bottom: 1rem;" />

                                        <RadzenCard style="height: max-content;">
                                            @CardHeader("File Summary")

                                            <RadzenText Text="@summary.SummaryText" />
                                        </RadzenCard>
                                    </RadzenAccordionItem>
                                }
                        </Items>
                    </RadzenAccordion>
                </RadzenCard>
                <RadzenCard Style="width: 100%; height: max-content">
                    @CardHeader("Topic Analysis")
                    <img src="topics.png"/>
                </RadzenCard>
            </RadzenStack>


            <RadzenCard Style="width: 500px; height: max-content">
                @CardHeader("Word Frequency (WordCloud)")
                <img src="wordcloud.png"/>
            </RadzenCard>
        </RadzenStack>
    </RadzenStack>

}


@code {
    private record SummaryModel(int SummaryId, string SummaryText, string OriginalText, string FileName);

    List<string>? allProjects;

    string? projectId;

    List<SummaryModel> summaries = [];
    string? projectSummary;

    RenderFragment<string> CardHeader = text =>
@<RadzenText TextStyle="TextStyle.Overline" Text="@text" Style="margin-bottom: 1rem; display: block;" />;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();

        allProjects = await context.Summaries
        .Select(s => s.ProjectId)
        .Distinct()
        .ToListAsync();
    }

    async Task OnProjectSelect()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();

        summaries = await context.Summaries
        .Where(s => s.ProjectId == projectId)
        .Select(s => new SummaryModel(s.SummaryId, s.SummaryText, s.FileText, s.OriginalFileName))
        .ToListAsync();

        projectSummary = await context.ProjectSummaries
        .Where(ps => ps.ProjectId == projectId)
        .Select(ps => ps.SummaryText)
        .SingleAsync();
    }

    async Task DownloadSummary(SummaryModel summary)
    {
        await JS.InvokeVoidAsync("triggerFileDownload", summary.FileName, $"api/files/{summary.SummaryId}");
    }
}